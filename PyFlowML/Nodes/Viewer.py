from PyFlow.Core import NodeBase
from PyFlow.Packages.PyFlowBase.Pins.StringPin import StringPin
from PyFlow.Core.Common import PinOptions
from PyFlow.Core.Common import *
from PyFlow.Packages.PyFlowBase.Tools import RESOURCES_DIR
from PyFlow.UI.Canvas.UINodeBase import UINodeBase
from PyFlow.UI.Canvas.UICommon import NodeDefaults
from PyFlow.UI.Widgets.PropertiesFramework import CollapsibleFormWidget
from PySide2.QtWidgets import QLabel, QInputDialog, QDialog, QVBoxLayout, QLineEdit, QPushButton, QMessageBox
from PySide2.QtCore import Qt
from Qt import QtWidgets, QtGui

class UINodeImageViewer(UINodeBase):
    def __init__(self, raw_node):
        super(UINodeImageViewer, self).__init__(raw_node)
        self.resizable = False
        self.hoverable = True
        self.asViewImage = True

class Viewer(NodeBase):
    def __init__(self, name):
        super(Viewer, self).__init__(name)
        self.result = self.createInputPin("result", 'StringPin')

    @staticmethod
    def pinTypeHints():
        return {'inputs': [], 'outputs': []}

    @staticmethod
    def category():
        return '2_Data_Visualization'

    @staticmethod
    def keywords():
        return []

    @staticmethod
    def description():
        return 'Image viewer node.'

    def serialize(self):
        data = super(Viewer, self).serialize()
        data['result'] = self.result.currentData()
        return data

    def postCreate(self, jsonTemplate=None):
        super(Viewer, self).postCreate(jsonTemplate)
        if 'result' in jsonTemplate:
            self.result.setData(jsonTemplate['result'])

    def compute(self, *args, **kwargs):
        result = self.result.getData()

        # Check if the result data is empty
        if not result:
            # Show information dialog if result is empty
            info_dialog = QMessageBox()
            info_dialog.setWindowTitle("Warning message")
            info_dialog.setText(
                "The output pin is empty. Verify output generated by executed nodes.")
            info_dialog.setStandardButtons(QMessageBox.Ok)
            info_dialog.exec_()
            print("No image path input provided.")
            return

        # Create a QLabel widget to display the image
        label = QtWidgets.QLabel()
        pixmap = QtGui.QPixmap(result)
        label.setPixmap(pixmap)

        # Create a QDialog to show the QLabel widget
        dialog = QtWidgets.QDialog()
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        dialog.setLayout(layout)
        dialog.setWindowTitle("Result")
        dialog.exec_()

    @staticmethod
    def category():
        return '2_Data_Visualization'
